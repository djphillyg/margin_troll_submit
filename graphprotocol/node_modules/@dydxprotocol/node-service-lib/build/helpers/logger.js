'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _winston = require('winston');

var _winston2 = _interopRequireDefault(_winston);

var _bugsnag = require('./bugsnag');

var _stackTransport = require('./stack-transport');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

const dev = process.env.NODE_ENV === 'development';
const test = process.env.NODE_ENV === 'test';

const alignedWithColorsAndTime = _winston2.default.format.combine(_winston2.default.format.colorize(), _winston2.default.format.timestamp(), _winston2.default.format.printf(info => {
  const {
    timestamp, level } = info,
        args = _objectWithoutProperties(info, ['timestamp', 'level']);

  const ts = timestamp.slice(0, 19).replace('T', ' ');
  return `${ts} [${level}]: ${Object.keys(args).length ? JSON.stringify(args, null, 2) : ''}`;
}));

const transports = [];

if (!dev && !test) {
  transports.push(new _bugsnag.BugsnagTransport({
    level: 'error',
    handleExceptions: true
  }));
} else {
  transports.push(new _stackTransport.StackTransport({
    level: 'error',
    handleExceptions: true
  }));
}

if (!test || process.env.LOGS) {
  transports.push(new _winston2.default.transports.Console({
    level: 'debug',
    handleExceptions: true,
    format: dev || test ? alignedWithColorsAndTime : undefined
  }));
}

const Logger = _winston2.default.createLogger({
  transports,
  exitOnError: false
});

exports.default = Logger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2xvZ2dlci5qcyJdLCJuYW1lcyI6WyJkZXYiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJ0ZXN0IiwiYWxpZ25lZFdpdGhDb2xvcnNBbmRUaW1lIiwid2luc3RvbiIsImZvcm1hdCIsImNvbWJpbmUiLCJjb2xvcml6ZSIsInRpbWVzdGFtcCIsInByaW50ZiIsImluZm8iLCJsZXZlbCIsImFyZ3MiLCJ0cyIsInNsaWNlIiwicmVwbGFjZSIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJKU09OIiwic3RyaW5naWZ5IiwidHJhbnNwb3J0cyIsInB1c2giLCJCdWdzbmFnVHJhbnNwb3J0IiwiaGFuZGxlRXhjZXB0aW9ucyIsIlN0YWNrVHJhbnNwb3J0IiwiTE9HUyIsIkNvbnNvbGUiLCJ1bmRlZmluZWQiLCJMb2dnZXIiLCJjcmVhdGVMb2dnZXIiLCJleGl0T25FcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBRUEsTUFBTUEsTUFBTUMsUUFBUUMsR0FBUixDQUFZQyxRQUFaLEtBQXlCLGFBQXJDO0FBQ0EsTUFBTUMsT0FBT0gsUUFBUUMsR0FBUixDQUFZQyxRQUFaLEtBQXlCLE1BQXRDOztBQUVBLE1BQU1FLDJCQUEyQkMsa0JBQVFDLE1BQVIsQ0FBZUMsT0FBZixDQUMvQkYsa0JBQVFDLE1BQVIsQ0FBZUUsUUFBZixFQUQrQixFQUUvQkgsa0JBQVFDLE1BQVIsQ0FBZUcsU0FBZixFQUYrQixFQUcvQkosa0JBQVFDLE1BQVIsQ0FBZUksTUFBZixDQUF1QkMsSUFBRCxJQUFVO0FBQzlCLFFBQU07QUFDSkYsYUFESSxFQUNPRyxLQURQLEtBRUZELElBRko7QUFBQSxRQUN1QkUsSUFEdkIsNEJBRUlGLElBRko7O0FBSUEsUUFBTUcsS0FBS0wsVUFBVU0sS0FBVixDQUFnQixDQUFoQixFQUFtQixFQUFuQixFQUF1QkMsT0FBdkIsQ0FBK0IsR0FBL0IsRUFBb0MsR0FBcEMsQ0FBWDtBQUNBLFNBQVEsR0FBRUYsRUFBRyxLQUFJRixLQUFNLE1BQUtLLE9BQU9DLElBQVAsQ0FBWUwsSUFBWixFQUFrQk0sTUFBbEIsR0FDeEJDLEtBQUtDLFNBQUwsQ0FBZVIsSUFBZixFQUFxQixJQUFyQixFQUEyQixDQUEzQixDQUR3QixHQUNRLEVBQUcsRUFEdkM7QUFFRCxDQVJELENBSCtCLENBQWpDOztBQWNBLE1BQU1TLGFBQWEsRUFBbkI7O0FBRUEsSUFBSSxDQUFDdkIsR0FBRCxJQUFRLENBQUNJLElBQWIsRUFBbUI7QUFDakJtQixhQUFXQyxJQUFYLENBQ0UsSUFBSUMseUJBQUosQ0FBcUI7QUFDbkJaLFdBQU8sT0FEWTtBQUVuQmEsc0JBQWtCO0FBRkMsR0FBckIsQ0FERjtBQU1ELENBUEQsTUFPTztBQUNMSCxhQUFXQyxJQUFYLENBQ0UsSUFBSUcsOEJBQUosQ0FBbUI7QUFDakJkLFdBQU8sT0FEVTtBQUVqQmEsc0JBQWtCO0FBRkQsR0FBbkIsQ0FERjtBQU1EOztBQUVELElBQUksQ0FBQ3RCLElBQUQsSUFBU0gsUUFBUUMsR0FBUixDQUFZMEIsSUFBekIsRUFBK0I7QUFDN0JMLGFBQVdDLElBQVgsQ0FDRSxJQUFJbEIsa0JBQVFpQixVQUFSLENBQW1CTSxPQUF2QixDQUErQjtBQUM3QmhCLFdBQU8sT0FEc0I7QUFFN0JhLHNCQUFrQixJQUZXO0FBRzdCbkIsWUFBU1AsT0FBT0ksSUFBUixHQUFnQkMsd0JBQWhCLEdBQTJDeUI7QUFIdEIsR0FBL0IsQ0FERjtBQU9EOztBQUVELE1BQU1DLFNBQVN6QixrQkFBUTBCLFlBQVIsQ0FBcUI7QUFDbENULFlBRGtDO0FBRWxDVSxlQUFhO0FBRnFCLENBQXJCLENBQWY7O2tCQUtlRixNIiwiZmlsZSI6ImxvZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB3aW5zdG9uIGZyb20gJ3dpbnN0b24nO1xuaW1wb3J0IHsgQnVnc25hZ1RyYW5zcG9ydCB9IGZyb20gJy4vYnVnc25hZyc7XG5pbXBvcnQgeyBTdGFja1RyYW5zcG9ydCB9IGZyb20gJy4vc3RhY2stdHJhbnNwb3J0JztcblxuY29uc3QgZGV2ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCc7XG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JztcblxuY29uc3QgYWxpZ25lZFdpdGhDb2xvcnNBbmRUaW1lID0gd2luc3Rvbi5mb3JtYXQuY29tYmluZShcbiAgd2luc3Rvbi5mb3JtYXQuY29sb3JpemUoKSxcbiAgd2luc3Rvbi5mb3JtYXQudGltZXN0YW1wKCksXG4gIHdpbnN0b24uZm9ybWF0LnByaW50ZigoaW5mbykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHRpbWVzdGFtcCwgbGV2ZWwsIC4uLmFyZ3NcbiAgICB9ID0gaW5mbztcblxuICAgIGNvbnN0IHRzID0gdGltZXN0YW1wLnNsaWNlKDAsIDE5KS5yZXBsYWNlKCdUJywgJyAnKTtcbiAgICByZXR1cm4gYCR7dHN9IFske2xldmVsfV06ICR7T2JqZWN0LmtleXMoYXJncykubGVuZ3RoXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KGFyZ3MsIG51bGwsIDIpIDogJyd9YDtcbiAgfSksXG4pO1xuXG5jb25zdCB0cmFuc3BvcnRzID0gW107XG5cbmlmICghZGV2ICYmICF0ZXN0KSB7XG4gIHRyYW5zcG9ydHMucHVzaChcbiAgICBuZXcgQnVnc25hZ1RyYW5zcG9ydCh7XG4gICAgICBsZXZlbDogJ2Vycm9yJyxcbiAgICAgIGhhbmRsZUV4Y2VwdGlvbnM6IHRydWUsXG4gICAgfSksXG4gICk7XG59IGVsc2Uge1xuICB0cmFuc3BvcnRzLnB1c2goXG4gICAgbmV3IFN0YWNrVHJhbnNwb3J0KHtcbiAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgaGFuZGxlRXhjZXB0aW9uczogdHJ1ZSxcbiAgICB9KSxcbiAgKTtcbn1cblxuaWYgKCF0ZXN0IHx8IHByb2Nlc3MuZW52LkxPR1MpIHtcbiAgdHJhbnNwb3J0cy5wdXNoKFxuICAgIG5ldyB3aW5zdG9uLnRyYW5zcG9ydHMuQ29uc29sZSh7XG4gICAgICBsZXZlbDogJ2RlYnVnJyxcbiAgICAgIGhhbmRsZUV4Y2VwdGlvbnM6IHRydWUsXG4gICAgICBmb3JtYXQ6IChkZXYgfHwgdGVzdCkgPyBhbGlnbmVkV2l0aENvbG9yc0FuZFRpbWUgOiB1bmRlZmluZWQsXG4gICAgfSksXG4gICk7XG59XG5cbmNvbnN0IExvZ2dlciA9IHdpbnN0b24uY3JlYXRlTG9nZ2VyKHtcbiAgdHJhbnNwb3J0cyxcbiAgZXhpdE9uRXJyb3I6IGZhbHNlLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2dlcjtcbiJdfQ==