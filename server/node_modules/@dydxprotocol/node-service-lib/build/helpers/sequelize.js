'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _sequelize = require('sequelize');

var _sequelize2 = _interopRequireDefault(_sequelize);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const sequelize = new _sequelize2.default(`postgres://${process.env.DB_USERNAME}:${process.env.DB_PASSWORD}` + `@${process.env.DB_HOSTNAME}:${process.env.DB_PORT}/${process.env.DB_NAME}`, {
  logging: false,
  dialect: 'postgres',
  protocol: 'postgres',
  operatorsAliases: _sequelize.Op,
  pool: {
    max: process.env.PG_POOL_MAX,
    min: process.env.PG_POOL_MIN,
    idle: process.env.PG_POOL_IDLE,
    acquire: process.env.PG_POOL_ACQUIRE,
    handleDisconnects: true
  }
});

async function connect() {
  try {
    await sequelize.authenticate();

    _logger2.default.info({
      at: 'sequelize#connect',
      message: 'Connected to postgres'
    });
  } catch (e) {
    if (process.env.NODE_ENV === 'test') {
      throw e;
    }

    _logger2.default.error({
      at: 'sequelize#connect',
      message: 'Failed to connect to postgres',
      error: e
    });
    setTimeout(connect, 5000);
  }
}

sequelize.connect = connect;

exports.default = sequelize;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3NlcXVlbGl6ZS5qcyJdLCJuYW1lcyI6WyJzZXF1ZWxpemUiLCJTZXF1ZWxpemUiLCJwcm9jZXNzIiwiZW52IiwiREJfVVNFUk5BTUUiLCJEQl9QQVNTV09SRCIsIkRCX0hPU1ROQU1FIiwiREJfUE9SVCIsIkRCX05BTUUiLCJsb2dnaW5nIiwiZGlhbGVjdCIsInByb3RvY29sIiwib3BlcmF0b3JzQWxpYXNlcyIsIk9wIiwicG9vbCIsIm1heCIsIlBHX1BPT0xfTUFYIiwibWluIiwiUEdfUE9PTF9NSU4iLCJpZGxlIiwiUEdfUE9PTF9JRExFIiwiYWNxdWlyZSIsIlBHX1BPT0xfQUNRVUlSRSIsImhhbmRsZURpc2Nvbm5lY3RzIiwiY29ubmVjdCIsImF1dGhlbnRpY2F0ZSIsIkxvZ2dlciIsImluZm8iLCJhdCIsIm1lc3NhZ2UiLCJlIiwiTk9ERV9FTlYiLCJlcnJvciIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLFlBQVksSUFBSUMsbUJBQUosQ0FDZixjQUFhQyxRQUFRQyxHQUFSLENBQVlDLFdBQVksSUFBR0YsUUFBUUMsR0FBUixDQUFZRSxXQUFZLEVBQWpFLEdBQ0csSUFBR0gsUUFBUUMsR0FBUixDQUFZRyxXQUFZLElBQUdKLFFBQVFDLEdBQVIsQ0FBWUksT0FBUSxJQUFHTCxRQUFRQyxHQUFSLENBQVlLLE9BQVEsRUFGNUQsRUFHaEI7QUFDRUMsV0FBUyxLQURYO0FBRUVDLFdBQVMsVUFGWDtBQUdFQyxZQUFVLFVBSFo7QUFJRUMsb0JBQWtCQyxhQUpwQjtBQUtFQyxRQUFNO0FBQ0pDLFNBQUtiLFFBQVFDLEdBQVIsQ0FBWWEsV0FEYjtBQUVKQyxTQUFLZixRQUFRQyxHQUFSLENBQVllLFdBRmI7QUFHSkMsVUFBTWpCLFFBQVFDLEdBQVIsQ0FBWWlCLFlBSGQ7QUFJSkMsYUFBU25CLFFBQVFDLEdBQVIsQ0FBWW1CLGVBSmpCO0FBS0pDLHVCQUFtQjtBQUxmO0FBTFIsQ0FIZ0IsQ0FBbEI7O0FBa0JBLGVBQWVDLE9BQWYsR0FBeUI7QUFDdkIsTUFBSTtBQUNGLFVBQU14QixVQUFVeUIsWUFBVixFQUFOOztBQUVBQyxxQkFBT0MsSUFBUCxDQUFZO0FBQ1ZDLFVBQUksbUJBRE07QUFFVkMsZUFBUztBQUZDLEtBQVo7QUFJRCxHQVBELENBT0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsUUFBSTVCLFFBQVFDLEdBQVIsQ0FBWTRCLFFBQVosS0FBeUIsTUFBN0IsRUFBcUM7QUFDbkMsWUFBTUQsQ0FBTjtBQUNEOztBQUVESixxQkFBT00sS0FBUCxDQUFhO0FBQ1hKLFVBQUksbUJBRE87QUFFWEMsZUFBUywrQkFGRTtBQUdYRyxhQUFPRjtBQUhJLEtBQWI7QUFLQUcsZUFBV1QsT0FBWCxFQUFvQixJQUFwQjtBQUNEO0FBQ0Y7O0FBRUR4QixVQUFVd0IsT0FBVixHQUFvQkEsT0FBcEI7O2tCQUVleEIsUyIsImZpbGUiOiJzZXF1ZWxpemUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2VxdWVsaXplLCB7IE9wIH0gZnJvbSAnc2VxdWVsaXplJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuXG5jb25zdCBzZXF1ZWxpemUgPSBuZXcgU2VxdWVsaXplKFxuICBgcG9zdGdyZXM6Ly8ke3Byb2Nlc3MuZW52LkRCX1VTRVJOQU1FfToke3Byb2Nlc3MuZW52LkRCX1BBU1NXT1JEfWBcbiAgKyBgQCR7cHJvY2Vzcy5lbnYuREJfSE9TVE5BTUV9OiR7cHJvY2Vzcy5lbnYuREJfUE9SVH0vJHtwcm9jZXNzLmVudi5EQl9OQU1FfWAsXG4gIHtcbiAgICBsb2dnaW5nOiBmYWxzZSxcbiAgICBkaWFsZWN0OiAncG9zdGdyZXMnLFxuICAgIHByb3RvY29sOiAncG9zdGdyZXMnLFxuICAgIG9wZXJhdG9yc0FsaWFzZXM6IE9wLFxuICAgIHBvb2w6IHtcbiAgICAgIG1heDogcHJvY2Vzcy5lbnYuUEdfUE9PTF9NQVgsXG4gICAgICBtaW46IHByb2Nlc3MuZW52LlBHX1BPT0xfTUlOLFxuICAgICAgaWRsZTogcHJvY2Vzcy5lbnYuUEdfUE9PTF9JRExFLFxuICAgICAgYWNxdWlyZTogcHJvY2Vzcy5lbnYuUEdfUE9PTF9BQ1FVSVJFLFxuICAgICAgaGFuZGxlRGlzY29ubmVjdHM6IHRydWUsXG4gICAgfSxcbiAgfSxcbik7XG5cbmFzeW5jIGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgc2VxdWVsaXplLmF1dGhlbnRpY2F0ZSgpO1xuXG4gICAgTG9nZ2VyLmluZm8oe1xuICAgICAgYXQ6ICdzZXF1ZWxpemUjY29ubmVjdCcsXG4gICAgICBtZXNzYWdlOiAnQ29ubmVjdGVkIHRvIHBvc3RncmVzJyxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cblxuICAgIExvZ2dlci5lcnJvcih7XG4gICAgICBhdDogJ3NlcXVlbGl6ZSNjb25uZWN0JyxcbiAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gY29ubmVjdCB0byBwb3N0Z3JlcycsXG4gICAgICBlcnJvcjogZSxcbiAgICB9KTtcbiAgICBzZXRUaW1lb3V0KGNvbm5lY3QsIDUwMDApO1xuICB9XG59XG5cbnNlcXVlbGl6ZS5jb25uZWN0ID0gY29ubmVjdDtcblxuZXhwb3J0IGRlZmF1bHQgc2VxdWVsaXplO1xuIl19